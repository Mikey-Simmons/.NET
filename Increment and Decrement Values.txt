Increment and Decrement Values C# Notes

Frequently, you'll need to increment and decrement a value, especially when you work with any looping logic or code that interacts with a data structure, which houses multiple elements of data.

The += operator adds and assigns the value on the right of the operator to the value on the left of the operator. 
So, lines two and three in the following code snippet are the same:

code:
    int value = 0;
    value = value + 5;
    value += 5;

The ++ operator increments the value of the variable by 1. So, lines two and three in the following code snippet are the same.
code:
    int value = 0;
    value = value + 1;
    value++;

These same techniques can be used for subtraction, multiplication and more. The following exercise steps will highlight a few.


Write code to increment and decrement a value.

code:
    int value = 1;

    value = value + 1;
    Console.WriteLine("First increment: " + value);

    value += 1;
    Console.WriteLine("Second increment: " + value);

    value++;
    Console.WriteLine("Third increment: " + value);

    value = value - 1;
    Console.WriteLine("First decrement: " + value);

    value -= 1;
    Console.WriteLine("Second decrement: " + value);

    value--;
    Console.WriteLine("Third decrement: " + value);

output:
    First increment: 2
    Second increment: 3
    Third increment: 4
    First decrement: 3
    Second decrement: 2
    Third decrement: 1

In the "second increment", I used value += 1; however I could have used any literal int value (or a variable) to increment that amount. 
The same holds true for the "second decrement": value -= 1;.    

Use the increment operator before and after the value.

code:
    int value = 1;
    value++;
    Console.WriteLine("First: " + value);
    Console.WriteLine("Second: " + value++);
    Console.WriteLine("Third: " + value);
    Console.WriteLine("Fourth: " + (++value));
output:
    First: 2
    Second: 2
    Third: 3
    Fourth: 4


Recap
Use compound assignment operators like +=, -=, *=, ++, and -- to perform a mathematical operation like increment or decrement, 
then assign the result into the original variable.
Increment and decrement operators perform differently depending on whether the operator is before or after the operand.