To add two numbers together, we'll use the addition operator, which is the plus symbol +. 
Yes, the same plusou use for string concatenation is also used for addition. 
The reuse of one symbol for multiple purposes is sometimes called "overloading the operator" and happens frequently in C#.
In this instance, the C# compiler understands what you're attempting to do.
The compiler parses your code and sees that the + (the operator) is surrounded by two numeric values (the operands). 
Given the data types of the variables (both are ints), 
it figures out that you intended to add those two values.

code:
    int firstNumber = 12;
    int secondNumber = 7;
    Console.WriteLine(firstNumber + secondNumber);
Output: 19

What happens if we try to use the + symbol with both string and int values?

code:
    string firstName = "Bob";
    int widgetsSold = 7;
    Console.WriteLine(firstName + " sold " + widgetsSold + " widgets.");
    
Output:
    Bob sold 7 widgets.
In this case, the C# compiler understands that we want to use the + symbol to concatenate the two operands. 
It deduces this because the + symbol is surrounded by operands of string and int data types. 
So, it attempts to implicitly convert the int variable widgetsSold into a string temporarily so it can concatenate it to the rest of the string. 
The C# compiler tries to help you when it can, but ideally, you would be explicit about your intentions.


code: 
    string firstName = "Bob";
    int widgetsSold = 7;
    Console.WriteLine(firstName + " sold " + widgetsSold + 7 + " widgets.");

output:
    Bob sold 77 widgets.

Instead of adding the int variable widgetsSold to the literal int 7, the compiler treats everything as a string and concatenates it all together.

Add parentheses to make our intention clear to the compiler!!!

code:
    string firstName = "Bob";
    int widgetsSold = 7;
    Console.WriteLine(firstName + " sold " + (widgetsSold + 7) + " widgets.");

output: 
    Bob sold 14 widgets.
The parentheses symbol () becomes another overloaded operator. 
In this case, the opening and closing parentheses form the order of operations operator, just like you might use in a mathematical formula. 
We indicate that we want the inner-most parentheses resolved first resulting in the addition of int values widgetsSold and the value 7. 
Once that is resolved, then it will implicitly convert the result to a string so that it can be concatenated with the rest of the message.

RECAP:
you can perform mathematical-like addition operations on numbers.
Both string concatenation and addition use the plus + symbol. This is called overloading an operator, and the compiler infers the proper use based on the data types it's operating on.
When it can, the C# compiler will implicitly convert an int into a string if it's obvious that the developer 
is trying to concatenate the string representation of a number for presentation purposes.
Use parentheses to define an order of operations to explicitly tell the compiler that we want to perform certain operations before other operations.