C# Math Operators

Write code to perform addition, subtraction, multiplication, and division with ints.

Code:
    int sum = 7 + 5;
    int difference = 7 - 5;
    int product = 7 * 5;
    int quotient = 7 / 5;

    Console.WriteLine("Sum: " + sum);
    Console.WriteLine("Difference: " + difference);
    Console.WriteLine("Product: " + product);
    Console.WriteLine("Quotient: " + quotient);

Output:
    Sum: 12
    Difference: 2
    Product: 35
    Quotient: 1

As you can see:

+ is the addition operator
- is the subtraction operator
* is the multiplication operator
/ is the division operator

However, the resulting quotient of our division example may not be what you may have expected.
The values after the decimal are truncated from quotient since it is defined as an int, and int cannot contain values after the decimal.

Add code to perform division using literal decimal data.
To see division working properly, we need to use a data type that supports fractional digits after the decimal point like decimal.

code:
    decimal decimalQuotient = 7.0m / 5;
    Console.WriteLine("Decimal quotient: " + decimalQuotient);
output:
    Decimal quotient: 1.4

In order for this to work, the quotient (left of the assignment operator) must be of type decimal and either the dividend or divisor must be of type decimal (or both).

As we learned in the previous exercise, we can use the () symbols as the order of operations operators. However, this isn't the only way the order of operations is determined.

In math, PEMDAS is an acronym that helps students remember the order in which multiple operations are performed. The order is:

Parentheses (whatever is inside the parenthesis is performed first)
Exponents
Multiplication and Division (from left to right)
Addition and Subtraction (from left to right)
C# follows the same order as PEMDAS except for exponents. 
While there's no exponent operator in C#, you can use the System.Math.Pow() method, which is available from the .NET Class Library. 
The module "Call methods from the .NET Class Library using C#" will feature this method and others.

code:
    int value1 = 3 + 4 * 5;
    int value2 = (3 + 4) * 5;
    Console.WriteLine(value1);
    Console.WriteLine(value2);
output:
    23
    35

Recap:

Use operators like +, -, *, and / to perform basic mathematical operations.
The division of two int values will result in the truncation of any values after the decimal point. To retain values after the decimal point, you need to cast the divisor or dividend (or both) to from int into a floating point number like decimal first, then the quotient must be of the same floating point type as well in order to avoid truncation.
Perform a cast operation to temporarily treat a value as if it were a different data type.
Use the % operator to capture the remainder after division.
The order of operations will follow the rules of the acronym PEMDAS.